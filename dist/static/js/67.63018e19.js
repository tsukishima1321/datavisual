"use strict";(self["webpackChunkvisual"]=self["webpackChunkvisual"]||[]).push([[67],{1067:function(a,e,d){d.r(e),d.d(e,{default:function(){return r}});var t=d(641);const v={class:"about"};function i(a,e){return(0,t.uX)(),(0,t.CE)("div",v,e[0]||(e[0]=[(0,t.Fv)('<div class="container" data-v-724d7ee4><h1 class="title" data-v-724d7ee4>数据可视化分析系统</h1><p class="subtitle" data-v-724d7ee4>基于Vue3 + ECharts的时序数据分析平台</p><div class="content-section" data-v-724d7ee4><h2 data-v-724d7ee4>项目概述</h2><p data-v-724d7ee4>本系统是一个时序数据可视化分析平台，支持Excel数据导入、多种数据运算、峰值检测、区间分析等功能。</p></div><div class="content-section" data-v-724d7ee4><h2 data-v-724d7ee4>核心算法介绍</h2><div class="algorithm-card" data-v-724d7ee4><h3 data-v-724d7ee4>LTTB降采样算法 (Largest-Triangle-Three-Buckets)</h3><div class="algorithm-content" data-v-724d7ee4><h4 data-v-724d7ee4>算法原理</h4><p data-v-724d7ee4>LTTB是一种高效的时序数据降采样算法，通过计算三角形面积来选择最具代表性的数据点。该算法能够在大幅减少数据点数量的同时，最大程度保持原始数据的形状特征和趋势。</p><h4 data-v-724d7ee4>核心步骤</h4><ol data-v-724d7ee4><li data-v-724d7ee4><strong data-v-724d7ee4>分桶策略</strong>：将数据均匀分成若干个桶（bucket）</li><li data-v-724d7ee4><strong data-v-724d7ee4>三角形计算</strong>：对于每个桶，计算与前后相邻点形成的三角形面积</li><li data-v-724d7ee4><strong data-v-724d7ee4>最大面积选择</strong>：选择形成最大三角形面积的点作为该桶的代表点</li><li data-v-724d7ee4><strong data-v-724d7ee4>保留关键点</strong>：始终保留首尾数据点</li></ol><h4 data-v-724d7ee4>应用场景</h4><ul data-v-724d7ee4><li data-v-724d7ee4>大规模时序数据的实时可视化</li><li data-v-724d7ee4>图表缩放时的动态采样</li><li data-v-724d7ee4>提升渲染性能同时保持数据特征</li></ul><div class="code-example" data-v-724d7ee4><h4 data-v-724d7ee4>算法特点</h4><div class="feature-grid" data-v-724d7ee4><div class="feature-item" data-v-724d7ee4><span class="feature-icon" data-v-724d7ee4>⚡</span><div data-v-724d7ee4><strong data-v-724d7ee4>高性能</strong><p data-v-724d7ee4>时间复杂度O(n)，适合实时处理</p></div></div><div class="feature-item" data-v-724d7ee4><span class="feature-icon" data-v-724d7ee4>🎯</span><div data-v-724d7ee4><strong data-v-724d7ee4>特征保持</strong><p data-v-724d7ee4>有效保留数据的峰值和趋势</p></div></div><div class="feature-item" data-v-724d7ee4><span class="feature-icon" data-v-724d7ee4>📈</span><div data-v-724d7ee4><strong data-v-724d7ee4>视觉友好</strong><p data-v-724d7ee4>降采样后的曲线视觉效果优异</p></div></div></div></div></div></div><div class="algorithm-card" data-v-724d7ee4><h3 data-v-724d7ee4>AMPD峰值检测算法 (Automatic Multiscale-based Peak Detection)</h3><div class="algorithm-content" data-v-724d7ee4><h4 data-v-724d7ee4>算法原理</h4><p data-v-724d7ee4>AMPD是一种基于多尺度分析的自动峰值检测算法，能够在无需预设参数的情况下，自动检测时序数据中的局部最大值。</p><h4 data-v-724d7ee4>核心步骤</h4><ol data-v-724d7ee4><li data-v-724d7ee4><strong data-v-724d7ee4>多尺度扫描</strong>：在不同的窗口尺度下扫描数据</li><li data-v-724d7ee4><strong data-v-724d7ee4>局部最大值检测</strong>：在每个尺度下标识局部最大值</li><li data-v-724d7ee4><strong data-v-724d7ee4>多尺度对比</strong>：选择不同尺度下都被检测为波峰的值作为结果</li></ol><h4 data-v-724d7ee4>算法优势</h4><ul data-v-724d7ee4><li data-v-724d7ee4><strong data-v-724d7ee4>无参数设定</strong>：算法自动确定检测参数，无需人工调优</li><li data-v-724d7ee4><strong data-v-724d7ee4>多尺度分析</strong>：能够检测不同宽度和高度的峰值</li></ul></div></div><div class="algorithm-card" data-v-724d7ee4><h3 data-v-724d7ee4>数值微分算法</h3><div class="algorithm-content" data-v-724d7ee4><h4 data-v-724d7ee4>算法原理</h4><p data-v-724d7ee4>采用中心差分法实现数值微分，通过计算相邻数据点的斜率来估算函数的导数。该方法在保持计算简单性的同时，提供了良好的数值稳定性。</p><h4 data-v-724d7ee4>核心公式</h4><div class="formula" data-v-724d7ee4><p data-v-724d7ee4><strong data-v-724d7ee4>五点中心差分：</strong> f&#39;(x) = [f(x-2h)-8f(x-h)+8f(x+h)-f(x+2h)] / 12h </p><p data-v-724d7ee4><strong data-v-724d7ee4>边界处理：</strong> 首尾点采用前向/后向差分</p></div><h4 data-v-724d7ee4>平滑处理</h4><p data-v-724d7ee4>系统集成了移动平均平滑算法，用于减少微分过程中的噪声放大效应：</p><ul data-v-724d7ee4><li data-v-724d7ee4>采用自适应窗口大小的移动平均</li><li data-v-724d7ee4>窗口大小基于采样频率调整</li><li data-v-724d7ee4>有效抑制高频噪声的影响</li></ul></div></div></div></div>',1)]))}var s=d(6262);const l={},n=(0,s.A)(l,[["render",i],["__scopeId","data-v-724d7ee4"]]);var r=n}}]);